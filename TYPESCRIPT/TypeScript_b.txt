-> you can use the spread operator (...) to copy the elements of an array to another array. 

1) Basic Array Copy
const originalArray: number[] = [1, 2, 3, 4, 5];
const copiedArray: number[] = [...originalArray];
console.log(copiedArray); // Output: [1, 2, 3, 4, 5]

2) Concatenating Arrays
const array1: string[] = ["a", "b", "c"];
const array2: string[] = ["d", "e", "f"];
const concatenatedArray: string[] = [...array1, ...array2];
console.log(concatenatedArray); // Output: ['a', 'b', 'c', 'd', 'e', 'f']

3) Adding an Element to a Copied Array
const originalArray: number[] = [1, 2, 3];
const newArray: number[] = [...originalArray, 4];
console.log(newArray); // Output: [1, 2, 3, 4]

4) Copying and Modifying an Element
const originalArray: number[] = [1, 2, 3];
// Replace the element at index 1 with 99
const modifiedArray: number[] = [...originalArray.slice(0, 1), 99, ...originalArray.slice(2)];
console.log(modifiedArray); // Output: [1, 99, 3]

...originalArray.slice(0, 1): This part uses the spread operator to copy the elements from originalArray starting from index 0 up to, but not including, index 1. In this case, it copies the element at index 0 (1).

99: This is a new element added to the modified array.

...originalArray.slice(2): This part uses the spread operator to copy the elements from originalArray starting from index 2 to the end. It copies the element at index 2 (3).


5) Copying an Array of Objects

interface Person {
  name: string;
  age: number;
}

const originalArray: Person[] = [
  { name: "Alice", age: 25 },
  { name: "Bob", age: 30 },
];
const copiedArray: Person[] = [...originalArray];

console.log(copiedArray); // Output: [ { name: 'Alice', age: 25 }, { name: 'Bob', age: 30 } ]


_______________________________________________________________
-> Array.prototype.slice()

const animals: string[] = ["ant", "bison", "camel", "duck", "elephant"];

console.log(animals.slice(2)); //[ 'camel', 'duck', 'elephant' ]
console.log(animals.slice(2, 4)); //[ 'camel', 'duck' ]
console.log(animals.slice(1, 5)); //[ 'bison', 'camel', 'duck', 'elephant' ]
_______________________________________________________________

-> some operations using spread / rest operator ( ... )

1) Modify Object properties.
interface Fruit {
  name: string;
  color: string;
  taste?: string;
}

const originalFruit: Fruit = { name: "Apple", color: "Red" };

const ModifiedFruit: Fruit = {
  ...originalFruit,
  color: "Green", // Modify the color
  taste: "Sweet", // Add a new property
};

console.log(ModifiedFruit); //  { name: 'Apple', color: 'Green', taste: 'Sweet' }

2) Omitting Properties 

interface Car {
  brand: string;
  model: string;
  year: number;
}

const car: Car = { brand: "Toyota", model: "Camry", year: 2022 };

const { year, ...carWithoutYear } = car;

console.log(carWithoutYear);  // { brand: 'Toyota', model: 'Camry' }
console.log(year);	 // 2022

To exclude properties of an object using destructuring assignment, you can combine the object destructuring syntax with the rest operator

3) Merge Objects

interface Person {
  name: string;
  age: number;
}

const person1: Person = { name: "Alice", age: 25 };
const person2: Person = { name: "Bob", age: 30 };

const mergedPerson: Person = { ...person1, ...person2 };

console.log(mergedPerson); // { name: 'Bob', age: 30 }

The statement console.log(mergedPerson); does not contain any reference to person1. This is because the spread operator (...) prioritizes properties from the later object when there are duplicates. In this case, person2 is the later object, so its properties overwrite any conflicting properties from person1.

Therefore, the mergedPerson object only contains the properties from person2
_______________________________________________________________

-> rest and spread operator ( ... )
Remember that while they share the same syntax (...), their behavior depends on the context in which they are used. 

1) Rest Operator:

a) Rest parameter in function:
function sum(...numbers: number[]): number {
  return numbers.reduce((total, num) => total + num, 0);
}

const result = sum(1, 2, 3, 4, 5);
console.log(result); // Output: 15


b) Rest in Array Destructuring
const [first, second, ...restOfNumbers] = [1, 2, 3, 4, 5];
console.log(first); // Output: 1
console.log(second); // Output: 2
console.log(restOfNumbers); // Output: [3, 4, 5]


2) Spread Operator:
The spread operator is used to spread elements from an array or properties from an object into another array or object. It's often used for creating shallow copies or combining multiple arrays/objects.

a) Spread in Array
const array1: number[] = [1, 2, 3];
const array2: number[] = [...array1, 4, 5, 6];
console.log(array2); // Output: [1, 2, 3, 4, 5, 6]

b) Spread in Object
const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3, d: 4 };
console.log(obj2); // Output: { a: 1, b: 2, c: 3, d: 4 }

_______________________________________________________________











_______________________________________________________________
_______________________________________________________________

---------------------------------------------------------------
